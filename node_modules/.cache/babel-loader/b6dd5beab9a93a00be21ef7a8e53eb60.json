{"ast":null,"code":"/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geometry, properties, bbox, id) {\n  if (geometry === undefined) throw new Error('geometry is required');\n  if (properties && properties.constructor !== Object) throw new Error('properties must be an Object');\n  if (bbox && bbox.length !== 4) throw new Error('bbox must be an Array of 4 numbers');\n  if (id && ['string', 'number'].indexOf(typeof id) === -1) throw new Error('id must be a number or a string');\n  var feat = {\n    type: 'Feature'\n  };\n  if (id) feat.id = id;\n  if (bbox) feat.bbox = bbox;\n  feat.properties = properties || {};\n  feat.geometry = geometry;\n  return feat;\n}\n\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<number>} coordinates Coordinates\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = 'Point';\n * var coordinates = [110, 50];\n *\n * var geometry = turf.geometry(type, coordinates);\n *\n * //=geometry\n */\nfunction geometry(type, coordinates, bbox) {\n  // Validation\n  if (!type) throw new Error('type is required');\n  if (!coordinates) throw new Error('coordinates is required');\n  if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n  if (bbox && bbox.length !== 4) throw new Error('bbox must be an Array of 4 numbers');\n  var geom;\n  switch (type) {\n    case 'Point':\n      geom = point(coordinates).geometry;\n      break;\n    case 'LineString':\n      geom = lineString(coordinates).geometry;\n      break;\n    case 'Polygon':\n      geom = polygon(coordinates).geometry;\n      break;\n    case 'MultiPoint':\n      geom = multiPoint(coordinates).geometry;\n      break;\n    case 'MultiLineString':\n      geom = multiLineString(coordinates).geometry;\n      break;\n    case 'MultiPolygon':\n      geom = multiPolygon(coordinates).geometry;\n      break;\n    default:\n      throw new Error(type + ' is invalid');\n  }\n  if (bbox) geom.bbox = bbox;\n  return geom;\n}\n\n/**\n * Takes coordinates and properties (optional) and returns a new {@link Point} feature.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, bbox, id) {\n  if (!coordinates) throw new Error('No coordinates passed');\n  if (coordinates.length === undefined) throw new Error('Coordinates must be an array');\n  if (coordinates.length < 2) throw new Error('Coordinates must be at least 2 numbers long');\n  if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) throw new Error('Coordinates must contain numbers');\n  return feature({\n    type: 'Point',\n    coordinates: coordinates\n  }, properties, bbox, id);\n}\n\n/**\n * Takes an array of LinearRings and optionally an {@link Object} with properties and returns a {@link Polygon} feature.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<Polygon>} a Polygon feature\n * @throws {Error} throw an error if a LinearRing of the polygon has too few positions\n * or if a LinearRing of the Polygon does not have matching Positions at the beginning & end.\n * @example\n * var polygon = turf.polygon([[\n *   [-2.275543, 53.464547],\n *   [-2.275543, 53.489271],\n *   [-2.215118, 53.489271],\n *   [-2.215118, 53.464547],\n *   [-2.275543, 53.464547]\n * ]], { name: 'poly1', population: 400});\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, bbox, id) {\n  if (!coordinates) throw new Error('No coordinates passed');\n  for (var i = 0; i < coordinates.length; i++) {\n    var ring = coordinates[i];\n    if (ring.length < 4) {\n      throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');\n    }\n    for (var j = 0; j < ring[ring.length - 1].length; j++) {\n      // Check if first point of Polygon contains two numbers\n      if (i === 0 && j === 0 && !isNumber(ring[0][0]) || !isNumber(ring[0][1])) throw new Error('Coordinates must contain numbers');\n      if (ring[ring.length - 1][j] !== ring[0][j]) {\n        throw new Error('First and last Position are not equivalent.');\n      }\n    }\n  }\n  return feature({\n    type: 'Polygon',\n    coordinates: coordinates\n  }, properties, bbox, id);\n}\n\n/**\n * Creates a {@link LineString} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<LineString>} a LineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var linestring1 = turf.lineString([\n *   [-21.964416, 64.148203],\n *   [-21.956176, 64.141316],\n *   [-21.93901, 64.135924],\n *   [-21.927337, 64.136673]\n * ]);\n * var linestring2 = turf.lineString([\n *   [-21.929054, 64.127985],\n *   [-21.912918, 64.134726],\n *   [-21.916007, 64.141016],\n *   [-21.930084, 64.14446]\n * ], {name: 'line 1', distance: 145});\n *\n * //=linestring1\n *\n * //=linestring2\n */\nfunction lineString(coordinates, properties, bbox, id) {\n  if (!coordinates) throw new Error('No coordinates passed');\n  if (coordinates.length < 2) throw new Error('Coordinates must be an array of two or more positions');\n  // Check if first point of LineString contains two numbers\n  if (!isNumber(coordinates[0][1]) || !isNumber(coordinates[0][1])) throw new Error('Coordinates must contain numbers');\n  return feature({\n    type: 'LineString',\n    coordinates: coordinates\n  }, properties, bbox, id);\n}\n\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {FeatureCollection} a FeatureCollection of input features\n * @example\n * var features = [\n *  turf.point([-75.343, 39.984], {name: 'Location A'}),\n *  turf.point([-75.833, 39.284], {name: 'Location B'}),\n *  turf.point([-75.534, 39.123], {name: 'Location C'})\n * ];\n *\n * var collection = turf.featureCollection(features);\n *\n * //=collection\n */\nfunction featureCollection(features, bbox, id) {\n  if (!features) throw new Error('No features passed');\n  if (!Array.isArray(features)) throw new Error('features must be an Array');\n  if (bbox && bbox.length !== 4) throw new Error('bbox must be an Array of 4 numbers');\n  if (id && ['string', 'number'].indexOf(typeof id) === -1) throw new Error('id must be a number or a string');\n  var fc = {\n    type: 'FeatureCollection'\n  };\n  if (id) fc.id = id;\n  if (bbox) fc.bbox = bbox;\n  fc.features = features;\n  return fc;\n}\n\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, bbox, id) {\n  if (!coordinates) throw new Error('No coordinates passed');\n  return feature({\n    type: 'MultiLineString',\n    coordinates: coordinates\n  }, properties, bbox, id);\n}\n\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, bbox, id) {\n  if (!coordinates) throw new Error('No coordinates passed');\n  return feature({\n    type: 'MultiPoint',\n    coordinates: coordinates\n  }, properties, bbox, id);\n}\n\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, bbox, id) {\n  if (!coordinates) throw new Error('No coordinates passed');\n  return feature({\n    type: 'MultiPolygon',\n    coordinates: coordinates\n  }, properties, bbox, id);\n}\n\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = {\n *     \"type\": \"Point\",\n *       \"coordinates\": [100, 0]\n *     };\n * var line = {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [ [101, 0], [102, 1] ]\n *   };\n * var collection = turf.geometryCollection([pt, line]);\n *\n * //=collection\n */\nfunction geometryCollection(geometries, properties, bbox, id) {\n  if (!geometries) throw new Error('geometries is required');\n  if (!Array.isArray(geometries)) throw new Error('geometries must be an Array');\n  return feature({\n    type: 'GeometryCollection',\n    geometries: geometries\n  }, properties, bbox, id);\n}\n\n// https://en.wikipedia.org/wiki/Great-circle_distance#Radius_for_spherical_Earth\nvar factors = {\n  miles: 3960,\n  nauticalmiles: 3441.145,\n  degrees: 57.2957795,\n  radians: 1,\n  inches: 250905600,\n  yards: 6969600,\n  meters: 6373000,\n  metres: 6373000,\n  centimeters: 6.373e+8,\n  centimetres: 6.373e+8,\n  kilometers: 6373,\n  kilometres: 6373,\n  feet: 20908792.65\n};\nvar areaFactors = {\n  kilometers: 0.000001,\n  kilometres: 0.000001,\n  meters: 1,\n  metres: 1,\n  centimetres: 10000,\n  millimeter: 1000000,\n  acres: 0.000247105,\n  miles: 3.86e-7,\n  yards: 1.195990046,\n  feet: 10.763910417,\n  inches: 1550.003100006\n};\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n  if (num === undefined || num === null || isNaN(num)) throw new Error('num is required');\n  if (precision && !(precision >= 0)) throw new Error('precision must be a positive number');\n  var multiplier = Math.pow(10, precision || 0);\n  return Math.round(num * multiplier) / multiplier;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToDistance\n * @param {number} radians in radians across the sphere\n * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToDistance(radians, units) {\n  if (radians === undefined || radians === null) throw new Error('radians is required');\n  var factor = factors[units || 'kilometers'];\n  if (!factor) throw new Error('units is invalid');\n  return radians * factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name distanceToRadians\n * @param {number} distance in real units\n * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction distanceToRadians(distance, units) {\n  if (distance === undefined || distance === null) throw new Error('distance is required');\n  var factor = factors[units || 'kilometers'];\n  if (!factor) throw new Error('units is invalid');\n  return distance / factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name distanceToDegrees\n * @param {number} distance in real units\n * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction distanceToDegrees(distance, units) {\n  return radians2degrees(distanceToRadians(distance, units));\n}\n\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAngle\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAngle(bearing) {\n  if (bearing === null || bearing === undefined) throw new Error('bearing is required');\n  var angle = bearing % 360;\n  if (angle < 0) angle += 360;\n  return angle;\n}\n\n/**\n * Converts an angle in radians to degrees\n *\n * @name radians2degrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radians2degrees(radians) {\n  if (radians === null || radians === undefined) throw new Error('radians is required');\n  var degrees = radians % (2 * Math.PI);\n  return degrees * 180 / Math.PI;\n}\n\n/**\n * Converts an angle in degrees to radians\n *\n * @name degrees2radians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degrees2radians(degrees) {\n  if (degrees === null || degrees === undefined) throw new Error('degrees is required');\n  var radians = degrees % 360;\n  return radians * Math.PI / 180;\n}\n\n/**\n * Converts a distance to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} distance to be converted\n * @param {string} originalUnit of the distance\n * @param {string} [finalUnit=kilometers] returned unit\n * @returns {number} the converted distance\n */\nfunction convertDistance(distance, originalUnit, finalUnit) {\n  if (distance === null || distance === undefined) throw new Error('distance is required');\n  if (!(distance >= 0)) throw new Error('distance must be a positive number');\n  var convertedDistance = radiansToDistance(distanceToRadians(distance, originalUnit), finalUnit || 'kilometers');\n  return convertedDistance;\n}\n\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeter, acre, mile, yard, foot, inch\n * @param {number} area to be converted\n * @param {string} [originalUnit=meters] of the distance\n * @param {string} [finalUnit=kilometers] returned unit\n * @returns {number} the converted distance\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n  if (area === null || area === undefined) throw new Error('area is required');\n  if (!(area >= 0)) throw new Error('area must be a positive number');\n  var startFactor = areaFactors[originalUnit || 'meters'];\n  if (!startFactor) throw new Error('invalid original units');\n  var finalFactor = areaFactors[finalUnit || 'kilometers'];\n  if (!finalFactor) throw new Error('invalid final units');\n  return area / startFactor * finalFactor;\n}\n\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n  return !isNaN(num) && num !== null && !Array.isArray(num);\n}\nmodule.exports = {\n  feature: feature,\n  geometry: geometry,\n  featureCollection: featureCollection,\n  geometryCollection: geometryCollection,\n  point: point,\n  multiPoint: multiPoint,\n  lineString: lineString,\n  multiLineString: multiLineString,\n  polygon: polygon,\n  multiPolygon: multiPolygon,\n  radiansToDistance: radiansToDistance,\n  distanceToRadians: distanceToRadians,\n  distanceToDegrees: distanceToDegrees,\n  radians2degrees: radians2degrees,\n  degrees2radians: degrees2radians,\n  bearingToAngle: bearingToAngle,\n  convertDistance: convertDistance,\n  convertArea: convertArea,\n  round: round,\n  isNumber: isNumber\n};","map":{"version":3,"names":["feature","geometry","properties","bbox","id","undefined","Error","constructor","Object","length","indexOf","feat","type","coordinates","Array","isArray","geom","point","lineString","polygon","multiPoint","multiLineString","multiPolygon","isNumber","i","ring","j","featureCollection","features","fc","geometryCollection","geometries","factors","miles","nauticalmiles","degrees","radians","inches","yards","meters","metres","centimeters","centimetres","kilometers","kilometres","feet","areaFactors","millimeter","acres","round","num","precision","isNaN","multiplier","Math","pow","radiansToDistance","units","factor","distanceToRadians","distance","distanceToDegrees","radians2degrees","bearingToAngle","bearing","angle","PI","degrees2radians","convertDistance","originalUnit","finalUnit","convertedDistance","convertArea","area","startFactor","finalFactor","module","exports"],"sources":["/Users/george/Developer/themeforest-nycondos-home-rental-react-template/nycondos-product/node_modules/@turf/helpers/index.js"],"sourcesContent":["/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geometry, properties, bbox, id) {\n    if (geometry === undefined) throw new Error('geometry is required');\n    if (properties && properties.constructor !== Object) throw new Error('properties must be an Object');\n    if (bbox && bbox.length !== 4) throw new Error('bbox must be an Array of 4 numbers');\n    if (id && ['string', 'number'].indexOf(typeof id) === -1) throw new Error('id must be a number or a string');\n\n    var feat = {type: 'Feature'};\n    if (id) feat.id = id;\n    if (bbox) feat.bbox = bbox;\n    feat.properties = properties || {};\n    feat.geometry = geometry;\n    return feat;\n}\n\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<number>} coordinates Coordinates\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = 'Point';\n * var coordinates = [110, 50];\n *\n * var geometry = turf.geometry(type, coordinates);\n *\n * //=geometry\n */\nfunction geometry(type, coordinates, bbox) {\n    // Validation\n    if (!type) throw new Error('type is required');\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n    if (bbox && bbox.length !== 4) throw new Error('bbox must be an Array of 4 numbers');\n\n    var geom;\n    switch (type) {\n    case 'Point': geom = point(coordinates).geometry; break;\n    case 'LineString': geom = lineString(coordinates).geometry; break;\n    case 'Polygon': geom = polygon(coordinates).geometry; break;\n    case 'MultiPoint': geom = multiPoint(coordinates).geometry; break;\n    case 'MultiLineString': geom = multiLineString(coordinates).geometry; break;\n    case 'MultiPolygon': geom = multiPolygon(coordinates).geometry; break;\n    default: throw new Error(type + ' is invalid');\n    }\n    if (bbox) geom.bbox = bbox;\n    return geom;\n}\n\n/**\n * Takes coordinates and properties (optional) and returns a new {@link Point} feature.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, bbox, id) {\n    if (!coordinates) throw new Error('No coordinates passed');\n    if (coordinates.length === undefined) throw new Error('Coordinates must be an array');\n    if (coordinates.length < 2) throw new Error('Coordinates must be at least 2 numbers long');\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) throw new Error('Coordinates must contain numbers');\n\n    return feature({\n        type: 'Point',\n        coordinates: coordinates\n    }, properties, bbox, id);\n}\n\n/**\n * Takes an array of LinearRings and optionally an {@link Object} with properties and returns a {@link Polygon} feature.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<Polygon>} a Polygon feature\n * @throws {Error} throw an error if a LinearRing of the polygon has too few positions\n * or if a LinearRing of the Polygon does not have matching Positions at the beginning & end.\n * @example\n * var polygon = turf.polygon([[\n *   [-2.275543, 53.464547],\n *   [-2.275543, 53.489271],\n *   [-2.215118, 53.489271],\n *   [-2.215118, 53.464547],\n *   [-2.275543, 53.464547]\n * ]], { name: 'poly1', population: 400});\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, bbox, id) {\n    if (!coordinates) throw new Error('No coordinates passed');\n\n    for (var i = 0; i < coordinates.length; i++) {\n        var ring = coordinates[i];\n        if (ring.length < 4) {\n            throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (i === 0 && j === 0 && !isNumber(ring[0][0]) || !isNumber(ring[0][1])) throw new Error('Coordinates must contain numbers');\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error('First and last Position are not equivalent.');\n            }\n        }\n    }\n\n    return feature({\n        type: 'Polygon',\n        coordinates: coordinates\n    }, properties, bbox, id);\n}\n\n/**\n * Creates a {@link LineString} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<LineString>} a LineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var linestring1 = turf.lineString([\n *   [-21.964416, 64.148203],\n *   [-21.956176, 64.141316],\n *   [-21.93901, 64.135924],\n *   [-21.927337, 64.136673]\n * ]);\n * var linestring2 = turf.lineString([\n *   [-21.929054, 64.127985],\n *   [-21.912918, 64.134726],\n *   [-21.916007, 64.141016],\n *   [-21.930084, 64.14446]\n * ], {name: 'line 1', distance: 145});\n *\n * //=linestring1\n *\n * //=linestring2\n */\nfunction lineString(coordinates, properties, bbox, id) {\n    if (!coordinates) throw new Error('No coordinates passed');\n    if (coordinates.length < 2) throw new Error('Coordinates must be an array of two or more positions');\n    // Check if first point of LineString contains two numbers\n    if (!isNumber(coordinates[0][1]) || !isNumber(coordinates[0][1])) throw new Error('Coordinates must contain numbers');\n\n    return feature({\n        type: 'LineString',\n        coordinates: coordinates\n    }, properties, bbox, id);\n}\n\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {FeatureCollection} a FeatureCollection of input features\n * @example\n * var features = [\n *  turf.point([-75.343, 39.984], {name: 'Location A'}),\n *  turf.point([-75.833, 39.284], {name: 'Location B'}),\n *  turf.point([-75.534, 39.123], {name: 'Location C'})\n * ];\n *\n * var collection = turf.featureCollection(features);\n *\n * //=collection\n */\nfunction featureCollection(features, bbox, id) {\n    if (!features) throw new Error('No features passed');\n    if (!Array.isArray(features)) throw new Error('features must be an Array');\n    if (bbox && bbox.length !== 4) throw new Error('bbox must be an Array of 4 numbers');\n    if (id && ['string', 'number'].indexOf(typeof id) === -1) throw new Error('id must be a number or a string');\n\n    var fc = {type: 'FeatureCollection'};\n    if (id) fc.id = id;\n    if (bbox) fc.bbox = bbox;\n    fc.features = features;\n    return fc;\n}\n\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, bbox, id) {\n    if (!coordinates) throw new Error('No coordinates passed');\n\n    return feature({\n        type: 'MultiLineString',\n        coordinates: coordinates\n    }, properties, bbox, id);\n}\n\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, bbox, id) {\n    if (!coordinates) throw new Error('No coordinates passed');\n\n    return feature({\n        type: 'MultiPoint',\n        coordinates: coordinates\n    }, properties, bbox, id);\n}\n\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, bbox, id) {\n    if (!coordinates) throw new Error('No coordinates passed');\n\n    return feature({\n        type: 'MultiPolygon',\n        coordinates: coordinates\n    }, properties, bbox, id);\n}\n\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = {\n *     \"type\": \"Point\",\n *       \"coordinates\": [100, 0]\n *     };\n * var line = {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [ [101, 0], [102, 1] ]\n *   };\n * var collection = turf.geometryCollection([pt, line]);\n *\n * //=collection\n */\nfunction geometryCollection(geometries, properties, bbox, id) {\n    if (!geometries) throw new Error('geometries is required');\n    if (!Array.isArray(geometries)) throw new Error('geometries must be an Array');\n\n    return feature({\n        type: 'GeometryCollection',\n        geometries: geometries\n    }, properties, bbox, id);\n}\n\n// https://en.wikipedia.org/wiki/Great-circle_distance#Radius_for_spherical_Earth\nvar factors = {\n    miles: 3960,\n    nauticalmiles: 3441.145,\n    degrees: 57.2957795,\n    radians: 1,\n    inches: 250905600,\n    yards: 6969600,\n    meters: 6373000,\n    metres: 6373000,\n    centimeters: 6.373e+8,\n    centimetres: 6.373e+8,\n    kilometers: 6373,\n    kilometres: 6373,\n    feet: 20908792.65\n};\n\nvar areaFactors = {\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    centimetres: 10000,\n    millimeter: 1000000,\n    acres: 0.000247105,\n    miles: 3.86e-7,\n    yards: 1.195990046,\n    feet: 10.763910417,\n    inches: 1550.003100006\n};\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (num === undefined || num === null || isNaN(num)) throw new Error('num is required');\n    if (precision && !(precision >= 0)) throw new Error('precision must be a positive number');\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToDistance\n * @param {number} radians in radians across the sphere\n * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToDistance(radians, units) {\n    if (radians === undefined || radians === null) throw new Error('radians is required');\n\n    var factor = factors[units || 'kilometers'];\n    if (!factor) throw new Error('units is invalid');\n    return radians * factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name distanceToRadians\n * @param {number} distance in real units\n * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction distanceToRadians(distance, units) {\n    if (distance === undefined || distance === null) throw new Error('distance is required');\n\n    var factor = factors[units || 'kilometers'];\n    if (!factor) throw new Error('units is invalid');\n    return distance / factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name distanceToDegrees\n * @param {number} distance in real units\n * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction distanceToDegrees(distance, units) {\n    return radians2degrees(distanceToRadians(distance, units));\n}\n\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAngle\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAngle(bearing) {\n    if (bearing === null || bearing === undefined) throw new Error('bearing is required');\n\n    var angle = bearing % 360;\n    if (angle < 0) angle += 360;\n    return angle;\n}\n\n/**\n * Converts an angle in radians to degrees\n *\n * @name radians2degrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radians2degrees(radians) {\n    if (radians === null || radians === undefined) throw new Error('radians is required');\n\n    var degrees = radians % (2 * Math.PI);\n    return degrees * 180 / Math.PI;\n}\n\n/**\n * Converts an angle in degrees to radians\n *\n * @name degrees2radians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degrees2radians(degrees) {\n    if (degrees === null || degrees === undefined) throw new Error('degrees is required');\n\n    var radians = degrees % 360;\n    return radians * Math.PI / 180;\n}\n\n\n/**\n * Converts a distance to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} distance to be converted\n * @param {string} originalUnit of the distance\n * @param {string} [finalUnit=kilometers] returned unit\n * @returns {number} the converted distance\n */\nfunction convertDistance(distance, originalUnit, finalUnit) {\n    if (distance === null || distance === undefined) throw new Error('distance is required');\n    if (!(distance >= 0)) throw new Error('distance must be a positive number');\n\n    var convertedDistance = radiansToDistance(distanceToRadians(distance, originalUnit), finalUnit || 'kilometers');\n    return convertedDistance;\n}\n\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeter, acre, mile, yard, foot, inch\n * @param {number} area to be converted\n * @param {string} [originalUnit=meters] of the distance\n * @param {string} [finalUnit=kilometers] returned unit\n * @returns {number} the converted distance\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (area === null || area === undefined) throw new Error('area is required');\n    if (!(area >= 0)) throw new Error('area must be a positive number');\n\n    var startFactor = areaFactors[originalUnit || 'meters'];\n    if (!startFactor) throw new Error('invalid original units');\n\n    var finalFactor = areaFactors[finalUnit || 'kilometers'];\n    if (!finalFactor) throw new Error('invalid final units');\n\n    return (area / startFactor) * finalFactor;\n}\n\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n\nmodule.exports = {\n    feature: feature,\n    geometry: geometry,\n    featureCollection: featureCollection,\n    geometryCollection: geometryCollection,\n    point: point,\n    multiPoint: multiPoint,\n    lineString: lineString,\n    multiLineString: multiLineString,\n    polygon: polygon,\n    multiPolygon: multiPolygon,\n    radiansToDistance: radiansToDistance,\n    distanceToRadians: distanceToRadians,\n    distanceToDegrees: distanceToDegrees,\n    radians2degrees: radians2degrees,\n    degrees2radians: degrees2radians,\n    bearingToAngle: bearingToAngle,\n    convertDistance: convertDistance,\n    convertArea: convertArea,\n    round: round,\n    isNumber: isNumber\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}