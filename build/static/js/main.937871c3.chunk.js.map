{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Preloader","React","lazy","Home","Hometwo","Homethree","About","Apartmentgrid","Apartmentlist","Apartmentdetails","Broker","Classification","News","Newsdetail","Places","Placesdetail","Trending","Gallery","Contact","App","createElement","Router","Suspense","fallback","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4SAIA,MAAMA,EAAYC,IAAMC,KAAK,IAAM,gCAG7BC,EAAOF,IAAMC,KAAK,IAAM,4EACxBE,EAAUH,IAAMC,KAAK,IAAM,2EAC3BG,EAAYJ,IAAMC,KAAK,IAAM,0EAC7BI,EAAQL,IAAMC,KAAK,IAAM,6DACzBK,EAAgBN,IAAMC,KAAK,IAAM,sDACjCM,EAAgBP,IAAMC,KAAK,IAAM,sDACjCO,EAAmBR,IAAMC,KAAK,IAAM,gCACpCQ,EAAST,IAAMC,KAAK,IAAM,sDAC1BS,EAAiBV,IAAMC,KAAK,IAAM,sDAClCU,EAAOX,IAAMC,KAAK,IAAM,sDACxBW,EAAaZ,IAAMC,KAAK,IAAM,gCAC9BY,EAASb,IAAMC,KAAK,IAAM,sDAC1Ba,EAAed,IAAMC,KAAK,IAAM,gCAChCc,EAAWf,IAAMC,KAAK,IAAM,gCAC5Be,EAAUhB,IAAMC,KAAK,IAAM,6DAC3BgB,EAAUjB,IAAMC,KAAK,IAAM,sDA8BlBiB,MA5Bf,WACE,OACElB,IAAAmB,cAACC,IAAM,KACLpB,IAAAmB,cAACE,WAAQ,CAACC,SAAUtB,IAAAmB,cAAA,aACpBnB,IAAAmB,cAACpB,EAAS,MACRC,IAAAmB,cAACI,IAAM,KACLvB,IAAAmB,cAACK,IAAK,CAACC,OAAK,EAACC,KAAK,IAAIC,UAAWzB,IACjCF,IAAAmB,cAACK,IAAK,CAACE,KAAK,WAAWC,UAAWxB,IAClCH,IAAAmB,cAACK,IAAK,CAACE,KAAK,aAAaC,UAAWvB,IACpCJ,IAAAmB,cAACK,IAAK,CAACE,KAAK,SAASC,UAAWtB,IAChCL,IAAAmB,cAACK,IAAK,CAACE,KAAK,kBAAkBC,UAAWrB,IACzCN,IAAAmB,cAACK,IAAK,CAACE,KAAK,kBAAkBC,UAAWpB,IACzCP,IAAAmB,cAACK,IAAK,CAACE,KAAK,qBAAqBC,UAAWnB,IAC5CR,IAAAmB,cAACK,IAAK,CAACE,KAAK,UAAUC,UAAWlB,IACjCT,IAAAmB,cAACK,IAAK,CAACE,KAAK,kBAAkBC,UAAWjB,IACzCV,IAAAmB,cAACK,IAAK,CAACE,KAAK,QAAQC,UAAWhB,IAC/BX,IAAAmB,cAACK,IAAK,CAACE,KAAK,gBAAgBC,UAAWf,IACvCZ,IAAAmB,cAACK,IAAK,CAACE,KAAK,UAAUC,UAAWd,IACjCb,IAAAmB,cAACK,IAAK,CAACE,KAAK,kBAAkBC,UAAWb,IACzCd,IAAAmB,cAACK,IAAK,CAACE,KAAK,YAAYC,UAAWZ,IACnCf,IAAAmB,cAACK,IAAK,CAACE,KAAK,WAAWC,UAAWX,IAClChB,IAAAmB,cAACK,IAAK,CAACE,KAAK,WAAWC,UAAWV,QCjCxBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4DCANC,IAASC,OACPlC,IAAAmB,cAACgB,IAAa,KACZnC,IAAAmB,cAACD,EAAG,OAENkB,SAASC,eAAe,aD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAKC,IACJA,EAAaC,eAEdC,MAAMC,IACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.937871c3.chunk.js","sourcesContent":["import React, { Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n// Preloader\nconst Preloader = React.lazy(() => import(\"./components/layouts/Preloader\"));\n\n// Pages\nconst Home = React.lazy(() => import(\"./components/pages/Home\"));\nconst Hometwo = React.lazy(() => import(\"./components/pages/Hometwo\"));\nconst Homethree = React.lazy(() => import(\"./components/pages/Homethree\"));\nconst About = React.lazy(() => import(\"./components/pages/About\"));\nconst Apartmentgrid = React.lazy(() => import(\"./components/pages/Apartmentgrid\"));\nconst Apartmentlist = React.lazy(() => import(\"./components/pages/Apartmentlist\"));\nconst Apartmentdetails = React.lazy(() => import(\"./components/pages/Apartmentdetails\"));\nconst Broker = React.lazy(() => import(\"./components/pages/Broker\"));\nconst Classification = React.lazy(() => import(\"./components/pages/Classification\"));\nconst News = React.lazy(() => import(\"./components/pages/News\"));\nconst Newsdetail = React.lazy(() => import(\"./components/pages/Newsdetail\"));\nconst Places = React.lazy(() => import(\"./components/pages/Places\"));\nconst Placesdetail = React.lazy(() => import(\"./components/pages/Placesdetail\"));\nconst Trending = React.lazy(() => import(\"./components/pages/Trending\"));\nconst Gallery = React.lazy(() => import(\"./components/pages/Gallery\"));\nconst Contact = React.lazy(() => import(\"./components/pages/Contact\"));\n\nfunction App() {\n  return (\n    <Router>\n      <Suspense fallback={<div></div>}>\n      <Preloader/>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/hometwo\" component={Hometwo} />\n          <Route path=\"/homethree\" component={Homethree} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/apartment-grid\" component={Apartmentgrid} />\n          <Route path=\"/apartment-list\" component={Apartmentlist} />\n          <Route path=\"/apartment-details\" component={Apartmentdetails} />\n          <Route path=\"/broker\" component={Broker} />\n          <Route path=\"/classification\" component={Classification} />\n          <Route path=\"/news\" component={News} />\n          <Route path=\"/news-details\" component={Newsdetail} />\n          <Route path=\"/places\" component={Places} />\n          <Route path=\"/places-details\" component={Placesdetail} />\n          <Route path=\"/trending\" component={Trending} />\n          <Route path=\"/gallery\" component={Gallery} />\n          <Route path=\"/contact\" component={Contact} />\n        </Switch>\n      </Suspense>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\n// Css\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/slick-carousel/slick/slick.css';\nimport '../node_modules/slick-carousel/slick/slick-theme.css';\nimport '../node_modules/animate.css/animate.css';\nimport '../node_modules/magnific-popup/dist/magnific-popup.css';\nimport './assets/css/font-awesome.min.css';\nimport './assets/css/flaticon.css';\nimport './assets/fonts/flaticon/flaticon-2.css';\nimport './assets/css/default.css';\nimport './assets/css/style.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('nycondos')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}